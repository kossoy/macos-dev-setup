#!/bin/zsh
# =============================================================================
# IMPROVED ZSH CONFIGURATION
# =============================================================================
# This is an improved version of your zsh configuration with:
# - Better security practices
# - Optimized performance
# - Modular structure
# - Cross-platform compatibility
# =============================================================================

# Enable Powerlevel10k instant prompt (should stay at the top)
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# =============================================================================
# CORE CONFIGURATION
# =============================================================================

# Set ZSH directory for custom configurations
export ZSH_CONFIG_DIR="${ZSH_CONFIG_DIR:-$HOME/.zsh}"

# Set ZSH_CUSTOM for oh-my-zsh
export ZSH_CUSTOM="${ZSH_CUSTOM:-$ZSH_CONFIG_DIR}"

# Set ZSH_CACHE_DIR for oh-my-zsh
export ZSH_CACHE_DIR="${ZSH_CACHE_DIR:-$HOME/.cache/oh-my-zsh}"

# Set oh-my-zsh parameters
export DISABLE_UPDATE_PROMPT="${DISABLE_UPDATE_PROMPT:-true}"
export DISABLE_AUTO_UPDATE="${DISABLE_AUTO_UPDATE:-true}"
export ZSH_COMPDUMP="${ZSH_COMPDUMP:-$ZSH_CACHE_DIR/.zcompdump-${ZSH_VERSION}}"
export ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"

# Create ZSH config directory if it doesn't exist
[[ ! -d "$ZSH_CONFIG_DIR" ]] && mkdir -p "$ZSH_CONFIG_DIR"

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Essential environment variables
export TERM=xterm-256color
export EDITOR="${EDITOR:-$(which code || which vim || which nano)}"
export VIRTUAL_ENV_DISABLE_PROMPT=0

# =============================================================================
# PATH MANAGEMENT
# =============================================================================

# Load PATH configuration
if [[ -f "$ZSH_CONFIG_DIR/config/paths.zsh" ]]; then
    source "$ZSH_CONFIG_DIR/config/paths.zsh"
fi

# =============================================================================
# OH-MY-ZSH CONFIGURATION
# =============================================================================

# Path to oh-my-zsh installation
export ZSH="${ZSH:-$HOME/.oh-my-zsh}"

# Set theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# Optimized plugin list (removed redundant plugins)
plugins=(
    git
    brew
    macos
    zsh-autosuggestions
    virtualenv
    pip
    python
    docker
)

# Load oh-my-zsh
if [[ -d "$ZSH" ]]; then
    source "$ZSH/oh-my-zsh.sh"
fi

# =============================================================================
# MODULAR CONFIGURATION LOADING
# =============================================================================

# Load configuration modules (with error handling)
load_zsh_config() {
    local config_file="$1"
    if [[ -f "$config_file" ]]; then
        # Try to source the file and capture any errors
        if ! source "$config_file" 2>/dev/null; then
        # Only show warning if not in instant prompt mode
        [[ -z "${POWERLEVEL9K_INSTANT_PROMPT:-}" ]] && echo "Warning: Failed to load $config_file" >&2
            return 1
        fi
    else
        [[ -z "${POWERLEVEL9K_INSTANT_PROMPT:-}" ]] && echo "Warning: Config file not found: $config_file" >&2
        return 1
    fi
}

# Load core configurations (after instant prompt)
#     # Initialize pyenv
#     if command -v pyenv >/dev/null 2>&1; then
#         export PYENV_ROOT="$HOME/.pyenv"
#         eval "$(pyenv init - zsh)"
#     fi
    
    load_zsh_config "$ZSH_CONFIG_DIR/config/aliases.zsh"
    load_zsh_config "$ZSH_CONFIG_DIR/config/tools.zsh"
    
    # Load private configurations (API keys, etc.) - not in version control
    load_zsh_config "$ZSH_CONFIG_DIR/private/api-keys.zsh"
    
    # Load functions directly to avoid load_zsh_config issues
    if [[ -f "$ZSH_CONFIG_DIR/config/functions.zsh" ]]; then
        source "$ZSH_CONFIG_DIR/config/functions.zsh"
    fi

# =============================================================================
# LAZY LOADING FOR HEAVY TOOLS
# =============================================================================


# Lazy load conda (only when conda commands are used)
if [[ -f "$HOME/opt/miniconda3/bin/conda" ]]; then
    conda() {
        unfunction conda
        __conda_setup="$('$HOME/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "$HOME/opt/miniconda3/etc/profile.d/conda.sh" ]; then
                . "$HOME/opt/miniconda3/etc/profile.d/conda.sh"
            else
                export PATH="$HOME/opt/miniconda3/bin:$PATH"
            fi
        fi
        unset __conda_setup
        conda "$@"
    }
fi

# =============================================================================
# COMPLETION SYSTEM
# =============================================================================

# Initialize completion system
autoload -Uz compinit
# Only check for new completions once per day
if [[ -n ${ZDOTDIR:-$HOME}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# =============================================================================
# HISTORY CONFIGURATION
# =============================================================================

# History settings
HISTSIZE=10000
SAVEHIST=10000
HISTFILE="$HOME/.zsh_history"

# History options
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Disable autocorrect (prevents zsh from asking to correct commands)
unsetopt CORRECT
unsetopt CORRECT_ALL

# =============================================================================
# POWERLEVEL10K CONFIGURATION
# =============================================================================

# Load p10k configuration if it exists
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# =============================================================================
# FINAL INITIALIZATION
# =============================================================================

# Load any additional custom configurations
load_zsh_config "$ZSH_CONFIG_DIR/config/custom.zsh"

# Display startup time (for debugging)
if [[ "${ZSH_DEBUG:-false}" == "true" ]]; then
    echo "ZSH loaded in: ${SECONDS}s" >&2
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# Source organized zsh configuration
if [ -f ~/.config/zsh/zshrc ]; then
    source ~/.config/zsh/zshrc
fi



# FORCE pyenv initialization at end of .zshrc (DEBUG)
if command -v pyenv >/dev/null 2>&1; then
    export PYENV_ROOT="$HOME/.pyenv"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi
